<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xmlns:util="http://www.springframework.org/schema/util"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-3.2.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.2.xsd
				http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-2.5.xsd
		http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-3.2.xsd">
    <!--此文件负责整个mvc中的配置-->

    <!--启用spring的一些annotation -->
    <context:annotation-config/>

    <!-- 配置注解驱动 可以将request参数与绑定到controller参数上 -->
    <mvc:annotation-driven/>

    <!--静态资源映射-->
    <!--本项目把静态资源放在了webapp的statics目录下，资源映射如下-->
    <!--<mvc:resources mapping="/css/**" location="/WEB-INF/statics/css/"/>-->
    <!--<mvc:resources mapping="/js/**" location="/WEB-INF/statics/js/"/>-->
    <!--<mvc:resources mapping="/image/**" location="/WEB-INF/statics/image/"/>-->
    <!--<mvc:resources mapping="/css/**" location="/css/"/>-->
    <!--<mvc:resources mapping="/js/**" location="/js/"/>-->
    <!--<mvc:resources mapping="/image/**" location="/image/"/>-->

    <!-- 对模型视图名称的解析，即在模型视图名称添加前后缀(如果最后一个还是表示文件夹,则最后的斜杠不要漏了) 使用JSP-->
    <!-- 默认的视图解析器 在上边的解析错误时使用 (默认使用html)- -->
    <bean id="defaultViewResolver" class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <property name="viewClass" value="org.springframework.web.servlet.view.JstlView"/>
        <property name="prefix" value="/WEB-INF/view/"/><!--设置JSP文件的目录位置-->
        <property name="suffix" value=".html"/>
        <property name="exposeContextBeansAsAttributes" value="true"/>
    </bean>

    <!-- 容器默认的DefaultServletHandler处理 所有静态内容与无RequestMapping处理的URL -->
    <mvc:default-servlet-handler/>

    <!-- 自动扫描装配 -->
    <context:component-scan base-package="example.controller"/>

    <!--定义切面 指定拦截方法时 做什么-->
    <bean id="xmlAopDemoUserLog" class="example.service.aspect.XmlAopDemoUserLog"></bean>
    <aop:config>
        <aop:aspect ref="xmlAopDemoUserLog"> <!--指定切面-->
            <!--定义切点-->
            <!--<aop:pointcut id="logpoint" expression="execution(* example.service.user.UserService.GetDemoUser(..))"></aop:pointcut>-->
            <!--<aop:pointcut id="logpoint" expression="execution(* example.controller.IndexController.GetDemoUser(..))"></aop:pointcut>-->
            <aop:pointcut id="logpoint" expression="@annotation(example.aop.RequestLog)"/>
            <!--定义连接点-->
            <aop:before pointcut-ref="logpoint" method="beforeLog"></aop:before>
            <aop:after pointcut-ref="logpoint" method="afterLog"></aop:after>
            <aop:after-returning pointcut-ref="logpoint" method="afterReturningLog"></aop:after-returning>
            <aop:after-throwing pointcut-ref="logpoint" method="afterThrowingLog"></aop:after-throwing>
            <!--<aop:around pointcut-ref="logpoint" method="aroundLog"></aop:around>-->
        </aop:aspect>
    </aop:config>
</beans>